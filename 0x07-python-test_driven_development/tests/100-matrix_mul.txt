Module for 100-matrix_mul test cases


Import module:
    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Test cases for matrix_mul:
Case 1: Basic test with 2x2 matrices
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

Case 2: Basic test with 1x2 and 2x2 matrices
    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    [[13, 16]]

Case 3: Test with 3x3 matrices
    >>> matrix_mul([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]])
    [[30, 24, 18], [84, 69, 54], [138, 114, 90]]

Case 4: Test with an empty matrix
    >>> matrix_mul([], [[3]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

Case 5: Test with an empty matrix
    >>> matrix_mul([[4]], [])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

Case 6: Test with a non-rectangular matrix
    >>> matrix_mul([[1, 3], [3, 4, 2], [3, 4]], [[5, 4, 1], [7, 8, 2]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

Case 7: Test with a non-rectangular matrix
    >>> matrix_mul([[1, 5], [2, 4], [3, 4]], [[5, 6, 1], [7, 2]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_b must be of the same size

Case 8: Test with matrices that can't be multiplied
    >>> matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied

Case 9: Test with m_a not being lists
    >>> matrix_mul(123, [[1, 2]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list

Case 10: Test with m_b not being lists
    >>> matrix_mul([[8]], "bar")
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list

Case 11: Test with m_a being lists of lists
    >>> matrix_mul([1, 2, 4], [[9]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list of lists

Case 12: Test with m_b not being lists of lists
    >>> matrix_mul([[3]], [2, 5, 6])
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list of lists

Case 13: Valid
    >>> matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 8, 2]])
    [[19, 22, 5], [43, 50, 11], [43, 50, 11]]

Case 14: Test with non-integer/float elements in m_a
    >>> matrix_mul([[1, 'anger'], [3, 4]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

Case 15: Test with non-integer/float elements in m_b
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 'bag'], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats

Case 16:
    >>> matrix_mul([[3]])
    Traceback (most recent call last):
    ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Case 17:
    >>> matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Case 18:
    >>> matrix_mul([[3]], [[9]])
    [[27]]
